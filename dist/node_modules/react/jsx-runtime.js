const supportSymbol = typeof Symbol === 'function' && Symbol.for;
const REACT_ELEMENT_TYPE = supportSymbol
    ? Symbol.for('react.element')
    : 0xeac7;

const ReactElement = function (type, key, ref, props) {
    const element = {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        ref,
        props,
        __mark: 'try-react'
    };
    return element;
};
const jsx = (type, config, ...maybeChildren) => {
    let key = null;
    const props = {};
    let ref = null;
    for (const prop in config) {
        const val = config[prop];
        if (prop === 'key' && val !== undefined) {
            key = String(val);
            continue;
        }
        if (prop === 'ref' && val !== undefined) {
            ref = val;
            continue;
        }
        if ({}.hasOwnProperty.call(config, prop)) {
            props[prop] = val;
            continue;
        }
    }
    const maybeChildrenLength = maybeChildren.length;
    if (maybeChildrenLength) {
        if (maybeChildrenLength === 1) {
            props.children = maybeChildren[0];
        }
        else {
            props.children = maybeChildren;
        }
    }
    return ReactElement(type, key, ref, props);
};
const jsxDev = jsx;

export { jsx, jsxDev };
